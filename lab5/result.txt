lno@0	@31 program children: [3 7 12 17 22 27 30 ]
lno@1	@3 statement children: [1 0 2 ] stmt:declare
lno@1	@1 type type:int
lno@1	@0 variable varname: a
lno@1	@2 const type: 1
lno@2	@7 statement children: [5 4 6 ] stmt:declare
lno@2	@5 type type:int
lno@2	@4 variable varname: b
lno@2	@6 const type: 4
lno@3	@12 statement children: [8 11 ] stmt:assign
lno@3	@8 variable varname: c
lno@3	@11 expression children: [9 10 ]
lno@3	@9 variable varname: a
lno@3	@10 variable varname: b
lno@4	@17 statement children: [13 16 ] stmt:assign
lno@4	@13 variable varname: c
lno@4	@16 expression children: [14 15 ]
lno@4	@14 variable varname: a
lno@4	@15 variable varname: b
lno@5	@22 statement children: [18 21 ] stmt:assign
lno@5	@18 variable varname: c
lno@5	@21 expression children: [19 20 ]
lno@5	@19 variable varname: a
lno@5	@20 variable varname: b
lno@6	@27 statement children: [23 26 ] stmt:assign
lno@6	@23 variable varname: c
lno@6	@26 expression children: [24 25 ]
lno@6	@24 variable varname: a
lno@6	@25 variable varname: b
lno@6	@30 statement children: [28 29 ] stmt:output-printf
lno@7	@28 const type: "you"
lno@7	@29 variable varname: a
